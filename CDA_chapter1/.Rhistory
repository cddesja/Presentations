catch_dat
catch_dat$percent <- catch_dat$tot/sum(catch_dat$tot)
catch_dat$biomass_tonnes <- catch_dat$percent * 30.940 * 1e3
catch_dat$biomass_tonnes
bt <- rep(0, 53)
catch_dat$box_id <- catch_dat$box_id + 1
bt[catch_dat$box_id] <- catch_dat$biomass_tonnes
mgN <- tons_mgN(bt, unit = area)
mgN
mgN <- mgN[mgN>0]
ids <- 0:52
bio <- c(rep("_", 53))
bio[catch_dat$box_id] <- mgN
bio
cat(cat(bio, sep = ", "), ";", sep ="")
wt <- tons_mgN(100000, area[32])
wt
ls()
library("geo")
#library("ora")
library("sp")
library("dplyr")
library("rgdal")
source("Dropbox/hi/atlantis/ia_rscripts/atlantis_helpers.R")
options(digits = 22)
# Read in nephrops data from Jónas
data <- read.csv(file = "~/Dropbox/hi/atlantis/hafro_data/nephrops/afli00.csv")
# Find the areas from the BGM file
bgm <- readLines("~/Dropbox/hi/atlantis/iceland_atlantis/atlantis_L93.bgm")
match <- grep("area",bgm)
bgm_area <- bgm[match]
bgm_area <- strsplit(bgm_area, "\t")
# Select the 2nd element from each list
area <- as.numeric(sapply(bgm_area, "[[", 2))
# Create a unique identifier
data$id <- 1:nrow(data)
# Select only the lat and lon
box_ids <- select(data, id, lat, lon)
atlantis <- readOGR(dsn = "/Users/chris/Dropbox/hi/atlantis/spatial_data/atlantis/", layer = "atlantis_WGS84")
coords <- data.frame(lon = box_ids$lon, lat = box_ids$lat)
coords_sp <- SpatialPoints(coords, proj4string = CRS("+proj=longlat +datum=WGS84"))
ob <- SpatialPolygons(atlantis@polygons,proj4string=CRS("+proj=longlat +datum=WGS84"))
b_ids <- coords_sp %over% ob
row_order <- atlantis@data$box_id
pts_in <- rep(NA,length(b_ids))
for(i in 1:53){
subs <- which(b_ids == i)
pts_in[subs] <- row_order[i]
}
#sur_fix <- data.frame(id = box_ids$id, box_id = pts_in, lat = box_ids$lat, lon = box_ids$lon)
junk <- data
junk$box_id <- pts_in
junk1 <- junk[! is.na(junk$dypi),]
junk1$mdypi <- junk1$dypi *1.8288 # change fm to meters
junk2 <-  junk1[junk1$mdypi < 400,] # always some errors...
junk2 <-  junk2[junk2$mdypi > 50,] #  always some errors...
svaedi <- c(5, 20, 21, 22, 23, 24, 25)  # these value are set up to match jónas's areas
junk3 <- junk2[junk2$box_id %in% svaedi, ] # from reg.bc
catch_dat <- junk3 %>%
group_by(box_id) %>%
summarize(tot = sum(afli))
catch_dat$percent <- catch_dat$tot/sum(catch_dat$tot)
catch_dat$biomass_tonnes <- catch_dat$percent * 30.940 * 1e3
bt <- rep(0, 53)
bt[catch_dat$box_id] <- catch_dat$biomass_tonnes
mgN <- tons_mgN(bt, area = area)
# Omit the zeros
mgN <- mgN[mgN>0]
ids <- 0:52
bio <- c(rep("_", 53))
bio[catch_dat$box_id] <- mgN
# Copy/Paste this into initial conditions
cat(cat(bio, sep = ", "), ";", sep ="")
mgN <- tons_mgN(bt, unit = area)
# Omit the zeros
mgN <- mgN[mgN>0]
ids <- 0:52
bio <- c(rep("_", 53))
bio[catch_dat$box_id] <- mgN
# Copy/Paste this into initial conditions
cat(cat(bio, sep = ", "), ";", sep ="")
library("geo")
library("sp")
library("dplyr")
library("rgdal")
# Functions
source("Dropbox/hi/atlantis/ia_rscripts/atlantis_helpers.R")
#
# Nephrops
#
options(digits = 22)
# Read in nephrops data from Jónas
data <- read.csv(file = "~/Dropbox/hi/atlantis/hafro_data/nephrops/afli00.csv")
# Find the areas from the BGM file
bgm <- readLines("~/Dropbox/hi/atlantis/iceland_atlantis/atlantis_L93.bgm")
match <- grep("area",bgm)
bgm_area <- bgm[match]
bgm_area <- strsplit(bgm_area, "\t")
# Select the 2nd element from each list
area <- as.numeric(sapply(bgm_area, "[[", 2))
# Create a unique identifier
data$id <- 1:nrow(data)
# Select only the lat and lon
box_ids <- select(data, id, lat, lon)
atlantis <- readOGR(dsn = "/Users/chris/Dropbox/hi/atlantis/spatial_data/atlantis/", layer = "atlantis_WGS84")
coords <- data.frame(lon = box_ids$lon, lat = box_ids$lat)
coords_sp <- SpatialPoints(coords, proj4string = CRS("+proj=longlat +datum=WGS84"))
ob <- SpatialPolygons(atlantis@polygons,proj4string=CRS("+proj=longlat +datum=WGS84"))
b_ids <- coords_sp %over% ob
row_order <- atlantis@data$box_id
pts_in <- rep(NA,length(b_ids))
for(i in 1:53){
subs <- which(b_ids == i)
pts_in[subs] <- row_order[i]
}
#sur_fix <- data.frame(id = box_ids$id, box_id = pts_in, lat = box_ids$lat, lon = box_ids$lon)
junk <- data
junk$box_id <- pts_in
junk1 <- junk[! is.na(junk$dypi),]
junk1$mdypi <- junk1$dypi *1.8288 # change fm to meters
junk2 <-  junk1[junk1$mdypi < 400,] # always some errors...
junk2 <-  junk2[junk2$mdypi > 50,] #  always some errors...
svaedi <- c(5, 20, 21, 22, 23, 24, 25)  # these value are set up to match jónas's areas
junk3 <- junk2[junk2$box_id %in% svaedi, ] # from reg.bc
catch_dat <- junk3 %>%
group_by(box_id) %>%
summarize(tot = sum(afli))
catch_dat$percent <- catch_dat$tot/sum(catch_dat$tot)
catch_dat$biomass_tonnes <- catch_dat$percent * 30.940 * 1e3
bt <- rep(0, 53)
# Atlantis starts at 0 not 1
catch_dat$box_id <- catch_dat$box_id + 1
bt[catch_dat$box_id] <- catch_dat$biomass_tonnes
mgN <- tons_mgN(bt, unit = area)
# Omit the zeros
mgN <- mgN[mgN>0]
ids <- 0:52
bio <- c(rep("_", 53))
bio[catch_dat$box_id] <- mgN
# Copy/Paste this into initial conditions
cat(cat(bio, sep = ", "), ";", sep ="")
library("geo")
#library("ora")
library("sp")
library("dplyr")
library("rgdal")
source("Dropbox/hi/atlantis/ia_rscripts/atlantis_helpers.R")
options(digits = 22)
# Read in nephrops data from Jónas
data <- read.csv(file = "~/Dropbox/hi/atlantis/hafro_data/nephrops/afli00.csv")
# Find the areas from the BGM file
bgm <- readLines("~/Dropbox/hi/atlantis/iceland_atlantis/atlantis_L93.bgm")
match <- grep("area",bgm)
bgm_area <- bgm[match]
bgm_area <- strsplit(bgm_area, "\t")
# Select the 2nd element from each list
area <- as.numeric(sapply(bgm_area, "[[", 2))
# Create a unique identifier
data$id <- 1:nrow(data)
# Select only the lat and lon
box_ids <- select(data, id, lat, lon)
atlantis <- readOGR(dsn = "/Users/chris/Dropbox/hi/atlantis/spatial_data/atlantis/", layer = "atlantis_WGS84")
coords <- data.frame(lon = box_ids$lon, lat = box_ids$lat)
coords_sp <- SpatialPoints(coords, proj4string = CRS("+proj=longlat +datum=WGS84"))
ob <- SpatialPolygons(atlantis@polygons,proj4string=CRS("+proj=longlat +datum=WGS84"))
b_ids <- coords_sp %over% ob
row_order <- atlantis@data$box_id
pts_in <- rep(NA,length(b_ids))
for(i in 1:53){
subs <- which(b_ids == i)
pts_in[subs] <- row_order[i]
}
#sur_fix <- data.frame(id = box_ids$id, box_id = pts_in, lat = box_ids$lat, lon = box_ids$lon)
junk <- data
junk$box_id <- pts_in
junk1 <- junk[! is.na(junk$dypi),]
junk1$mdypi <- junk1$dypi *1.8288 # change fm to meters
junk2 <-  junk1[junk1$mdypi < 400,] # always some errors...
junk2 <-  junk2[junk2$mdypi > 50,] #  always some errors...
svaedi <- c(5, 20, 21, 22, 23, 24, 25)  # these value are set up to match jónas's areas
junk3 <- junk2[junk2$box_id %in% svaedi, ] # from reg.bc
catch_dat <- junk3 %>%
group_by(box_id) %>%
summarize(tot = sum(afli))
catch_dat$percent <- catch_dat$tot/sum(catch_dat$tot)
catch_dat$biomass_tonnes <- catch_dat$percent * 30.940 * 1e3
bt <- rep(0, 53)
bt[catch_dat$box_id] <- catch_dat$biomass_tonnes
mgN <- tons_mgN(bt, unit = area)
# Omit the zeros
mgN <- mgN[mgN>0]
ids <- 0:52
bio <- c(rep("_", 53))
bio[catch_dat$box_id] <- mgN
# Copy/Paste this into initial conditions
cat(cat(bio, sep = ", "), ";", sep ="")
library("geo")
library("sp")
library("dplyr")
library("rgdal")
# Functions
source("Dropbox/hi/atlantis/ia_rscripts/atlantis_helpers.R")
#
# Nephrops
#
options(digits = 22)
# Read in nephrops data from Jónas
data <- read.csv(file = "~/Dropbox/hi/atlantis/hafro_data/nephrops/afli00.csv")
# Find the areas from the BGM file
bgm <- readLines("~/Dropbox/hi/atlantis/iceland_atlantis/atlantis_L93.bgm")
match <- grep("area",bgm)
bgm_area <- bgm[match]
bgm_area <- strsplit(bgm_area, "\t")
# Select the 2nd element from each list
area <- as.numeric(sapply(bgm_area, "[[", 2))
# Create a unique identifier
data$id <- 1:nrow(data)
# Select only the lat and lon
box_ids <- select(data, id, lat, lon)
atlantis <- readOGR(dsn = "/Users/chris/Dropbox/hi/atlantis/spatial_data/atlantis/", layer = "atlantis_WGS84")
coords <- data.frame(lon = box_ids$lon, lat = box_ids$lat)
coords_sp <- SpatialPoints(coords, proj4string = CRS("+proj=longlat +datum=WGS84"))
ob <- SpatialPolygons(atlantis@polygons,proj4string=CRS("+proj=longlat +datum=WGS84"))
b_ids <- coords_sp %over% ob
row_order <- atlantis@data$box_id
pts_in <- rep(NA,length(b_ids))
for(i in 1:53){
subs <- which(b_ids == i)
pts_in[subs] <- row_order[i]
}
#sur_fix <- data.frame(id = box_ids$id, box_id = pts_in, lat = box_ids$lat, lon = box_ids$lon)
junk <- data
junk$box_id <- pts_in
junk1 <- junk[! is.na(junk$dypi),]
junk1$mdypi <- junk1$dypi *1.8288 # change fm to meters
junk2 <-  junk1[junk1$mdypi < 400,] # always some errors...
junk2 <-  junk2[junk2$mdypi > 50,] #  always some errors...
svaedi <- c(5, 20, 21, 22, 23, 24, 25)  # these value are set up to match jónas's areas
junk3 <- junk2[junk2$box_id %in% svaedi, ] # from reg.bc
catch_dat <- junk3 %>%
group_by(box_id) %>%
summarize(tot = sum(afli))
catch_dat$percent <- catch_dat$tot/sum(catch_dat$tot)
catch_dat$biomass_tonnes <- catch_dat$percent * 30.940 * 1e3
bt <- rep(0, 53)
# Atlantis starts at 0 not 1
catch_dat$box_id <- catch_dat$box_id + 1
bt[catch_dat$box_id] <- catch_dat$biomass_tonnes
mgN <- tons_mgN(bt, unit = area)
# Omit the zeros
mgN <- mgN[mgN>0]
ids <- 0:52
bio <- c(rep("_", 53))
bio[catch_dat$box_id] <- mgN
# Copy/Paste this into initial conditions
cat(cat(bio, sep = ", "), ";", sep ="")
catch_dat
library("geo")
#library("ora")
library("sp")
library("dplyr")
library("rgdal")
source("Dropbox/hi/atlantis/ia_rscripts/atlantis_helpers.R")
options(digits = 22)
# Read in nephrops data from Jónas
data <- read.csv(file = "~/Dropbox/hi/atlantis/hafro_data/nephrops/afli00.csv")
# Find the areas from the BGM file
bgm <- readLines("~/Dropbox/hi/atlantis/iceland_atlantis/atlantis_L93.bgm")
match <- grep("area",bgm)
bgm_area <- bgm[match]
bgm_area <- strsplit(bgm_area, "\t")
# Select the 2nd element from each list
area <- as.numeric(sapply(bgm_area, "[[", 2))
# Create a unique identifier
data$id <- 1:nrow(data)
# Select only the lat and lon
box_ids <- select(data, id, lat, lon)
atlantis <- readOGR(dsn = "/Users/chris/Dropbox/hi/atlantis/spatial_data/atlantis/", layer = "atlantis_WGS84")
coords <- data.frame(lon = box_ids$lon, lat = box_ids$lat)
coords_sp <- SpatialPoints(coords, proj4string = CRS("+proj=longlat +datum=WGS84"))
ob <- SpatialPolygons(atlantis@polygons,proj4string=CRS("+proj=longlat +datum=WGS84"))
b_ids <- coords_sp %over% ob
row_order <- atlantis@data$box_id
pts_in <- rep(NA,length(b_ids))
for(i in 1:53){
subs <- which(b_ids == i)
pts_in[subs] <- row_order[i]
}
#sur_fix <- data.frame(id = box_ids$id, box_id = pts_in, lat = box_ids$lat, lon = box_ids$lon)
junk <- data
junk$box_id <- pts_in
junk1 <- junk[! is.na(junk$dypi),]
junk1$mdypi <- junk1$dypi *1.8288 # change fm to meters
junk2 <-  junk1[junk1$mdypi < 400,] # always some errors...
junk2 <-  junk2[junk2$mdypi > 50,] #  always some errors...
svaedi <- c(5, 20, 21, 22, 23, 24, 25)  # these value are set up to match jónas's areas
junk3 <- junk2[junk2$box_id %in% svaedi, ] # from reg.bc
catch_dat <- junk3 %>%
group_by(box_id) %>%
summarize(tot = sum(afli))
catch_dat
catch_dat$percent <- catch_dat$tot/sum(catch_dat$tot)
catch_dat$biomass_tonnes <- catch_dat$percent * 30.940 * 1e3
bt <- rep(0, 53)
bt[catch_dat$box_id] <- catch_dat$biomass_tonnes
mgN <- tons_mgN(bt, unit = area)
# Omit the zeros
mgN <- mgN[mgN>0]
ids <- 0:52
bio <- c(rep("_", 53))
bio[catch_dat$box_id] <- mgN
# Copy/Paste this into initial conditions
cat(cat(bio, sep = ", "), ";", sep ="")
library("geo")
library("sp")
library("dplyr")
library("rgdal")
# Functions
source("Dropbox/hi/atlantis/ia_rscripts/atlantis_helpers.R")
#
# Nephrops
#
options(digits = 22)
# Read in nephrops data from Jónas
data <- read.csv(file = "~/Dropbox/hi/atlantis/hafro_data/nephrops/afli00.csv")
# Find the areas from the BGM file
bgm <- readLines("~/Dropbox/hi/atlantis/iceland_atlantis/atlantis_L93.bgm")
match <- grep("area",bgm)
bgm_area <- bgm[match]
bgm_area <- strsplit(bgm_area, "\t")
# Select the 2nd element from each list
area <- as.numeric(sapply(bgm_area, "[[", 2))
# Create a unique identifier
data$id <- 1:nrow(data)
# Select only the lat and lon
box_ids <- select(data, id, lat, lon)
atlantis <- readOGR(dsn = "/Users/chris/Dropbox/hi/atlantis/spatial_data/atlantis/", layer = "atlantis_WGS84")
coords <- data.frame(lon = box_ids$lon, lat = box_ids$lat)
coords_sp <- SpatialPoints(coords, proj4string = CRS("+proj=longlat +datum=WGS84"))
ob <- SpatialPolygons(atlantis@polygons,proj4string=CRS("+proj=longlat +datum=WGS84"))
b_ids <- coords_sp %over% ob
row_order <- atlantis@data$box_id
pts_in <- rep(NA,length(b_ids))
for(i in 1:53){
subs <- which(b_ids == i)
pts_in[subs] <- row_order[i]
}
#sur_fix <- data.frame(id = box_ids$id, box_id = pts_in, lat = box_ids$lat, lon = box_ids$lon)
junk <- data
junk$box_id <- pts_in
junk1 <- junk[! is.na(junk$dypi),]
junk1$mdypi <- junk1$dypi *1.8288 # change fm to meters
junk2 <-  junk1[junk1$mdypi < 400,] # always some errors...
junk2 <-  junk2[junk2$mdypi > 50,] #  always some errors...
svaedi <- c(5, 20, 21, 22, 23, 24, 25)  # these value are set up to match jónas's areas
junk3 <- junk2[junk2$box_id %in% svaedi, ] # from reg.bc
catch_dat <- junk3 %>%
group_by(box_id) %>%
summarize(tot = sum(afli))
catch_dat$percent <- catch_dat$tot/sum(catch_dat$tot)
catch_dat$biomass_tonnes <- catch_dat$percent * 30.940 * 1e3
bt <- rep(0, 53)
# Atlantis starts at 0 not 1
catch_dat$box_id <- catch_dat$box_id
bt[catch_dat$box_id] <- catch_dat$biomass_tonnes
mgN <- tons_mgN(bt, unit = area)
# Omit the zeros
mgN <- mgN[mgN>0]
ids <- 0:52
bio <- c(rep("_", 53))
catch_dat$box_id <- catch_dat$box_id + 1  # Because Atlantis starts at 0
bio[catch_dat$box_id] <- mgN
# Copy/Paste this into initial conditions
cat(cat(bio, sep = ", "), ";", sep ="")
wt <- tons_mgN(100000, area[32])
template <- rep("_", 53)
template[32] <- wt
cat(template,sep = ", ")
?pcauchy
rcauchy(1)
y <- rcauchy(1)
cat"#"
cat("#")
cat("## @knitr nitrogen_conversion\ntons_mgN <- function(tons, unit){\nmgN <- (tons * 1e9) / 20 / 5.7 / unit\nreturn(mgN)\n}
)
cat("## @knitr nitrogen_conversion\ntons_mgN <- function(tons, unit){\nmgN <- (tons * 1e9) / 20 / 5.7 / unit\nreturn(mgN))\n}
```
cat("## @knitr nitrogen_conversion\ntons_mgN <- function(tons, unit){\nmgN <- (tons * 1e9) / 20 / 5.7 / unit\nreturn(mgN))
)
""
adsf
adsf
'adf'
"masd"
cat("## @knitr nitrogen_conversion\ntons_mgN <- function(tons, unit){\nmgN <- (tons * 1e9) / 20 / 5.7 / unit\nreturn(mgN))\n"
""
cat("## @knitr nitrogen_conversion\ntons_mgN <- function(tons, unit){\nmgN <- (tons * 1e9) / 20 / 5.7 / unit\nreturn(mgN)\n")
cat("## @knitr nitrogen_conversion\ntons_mgN <- function(tons, unit){\nmgN <- (tons * 1e9) / 20 / 5.7 / unit\nreturn(mgN)\n")
cat("## @knitr nitrogen_conversion\ntons_mgN <- function(tons, unit){\nmgN <- (tons * 1e9) / 20 / 5.7 / unit\nreturn(mgN)}\n")
cat("## @knitr nitrogen_conversion\ntons_mgN <- function(tons, unit){\nmgN <- (tons * 1e9) / 20 / 5.7 / unit\nreturn(mgN)\n}\n")
cat("read_chunk(\"ocean_conversions.R\"")
cat("read_chunk(\"ocean_conversions.R\")")
cat("```{r, nitrogen_conversion}\n```")
scallop_landings <- read.csv("http://data.hafro.is/assmt/2013/quahog/landings.csv", header = T)
scallop_landings
scallop_landings <- read.csv("http://data.hafro.is/assmt/2013/scallop/landings.csv", header = T)
head(scallop_landings)
boxs <- c(31, 34, 34, 35, 20, 34, 34, 36, 16)
colSums(scallop_landings)
totals <- colSums(scallop_landings)
totals
totals <- colSums(scallop_landings)[-1]
totals
?digits
?options
length(totals)
totals/totals[10]
prop <- (totals/totals[10])[-10]
prop
sum(prop)
totals <- colSums(scallop_landings)[-c(1,10)]
totals
totals <- colSums(scallop_landings)[-c(1,11)]
totals
sum(totals)
prop <- totals/sum(totals)
prop
100000
bm_box <- prop*1e5
bm_box
box_bio <- data.frame(bio = prop, ids = boxs)
box_bio
box_bio <- data.frame(bio = bm_bio, ids = boxs)
box_bio <- data.frame(bio = bm_box, ids = boxs)
box_bio
library("dplyr")
bio_box <- box_bio %>%
group_by(ids) %>%
summarize(tot_bio = sum(bio))
bio_box
area
areas <- bio_box$ids + 1
areas
wt <- tons_mgN(bio_box$tot_bio, areas)
wt
bio_box$tot_bio
areas
tot_area <- as.numeric(sapply(bgm_area, "[[", 2))
wt <- tons_mgN(bio_box$tot_bio, tot_area[areas])
wt
sum(wt)
template <- rep("_", 53)
template[areas] <- wt
template
cat(template,sep = ", ")
#
# Atlantis maps
#
library(ggplot2) # graphing
library(dplyr)
library(geo)
library(mapproj)
library(rgdal)
atlantis.map <- readOGR(dsn = "Dropbox/hi/atlantis/spatial_data/atlantis/", layer = "atlantis_WGS84")
atlantis.map.tmp <- fortify(atlantis.map)
atlantis.map.tmp$island <- as.character(ifelse(atlantis.map.tmp$id == 51 | atlantis.map.tmp$id == 35, 1, 0))
#bound_boxes <- c(50,49,46:48, 43:45, 36:42)
#matches <- which(atlantis.map.tmp$id %in% bound_boxes)
#atlantis.map.tmp[matches,"island"] = 2
#atlantis.map.tmp$island <- as.factor(atlantis.map.tmp$island)
# Add Greenland
greenland.map <- readOGR(dsn = "Dropbox/hi/atlantis/spatial_data/island/wgs84/", layer = "greenland_poly_WGS84")
greenland.map.tmp <- fortify(greenland.map)
# Add Iceland
island.map <- readOGR(dsn = "Dropbox/hi/atlantis/spatial_data/island/wgs84/", layer = "island_poly_WGS84")
island.map.tmp <- fortify(island.map)
# Add Faroe
faroe.map <- readOGR(dsn = "Dropbox/hi/atlantis/spatial_data/island/wgs84/", layer = "faroe_poly_WGS84")
faroe.map.tmp <- fortify(faroe.map)
ggplot(data=atlantis.map.tmp, aes(long, lat, group=group)) + geom_polygon(fill = "#0072B2") + geom_path(col = "red") + theme_bw() + xlab("Longitude") + ylab("Latitude") + coord_map() + theme(legend.position="none") + geom_polygon(data = greenland.map.tmp, aes(long, lat), col = "#999999") + geom_polygon(data = island.map.tmp, aes(long, lat),col = "#999999") + geom_polygon(data = faroe.map.tmp, aes(long, lat),col = "#999999")
rm(list=ls())
setwd("~/Github/Presentations/knitr_IcelandRUG_26sept2014/")
ls()
dir()
knit('knit_toy/knit_toy.Rnw')
library(knitr)
knit('knit_toy/knit_toy.Rnw')
if(!require("shiny"))
install.packages("shiny")
demo("notebook", package = "knitr")
cat("Generates PDF\nknit('knit_toy/knit_toy.Rnw')\n\nGenerates R script\npurl('purl_toy/purl_toy.Rnw')\n\nGenerates PDF\nstitch('stitch_toy/stitch_toy.R')\n\nGenerates Markdown\nspin('spin_toy/spin_toy.R')")
cat("```{r, foo_time = file.info('foo.csv')$mtime}\nfoo <- read.csv(\"foo\")\n...")
setwd("../namsmatsstofnun/")
spin("26_june_intro_R.R")
?glm
data(HairEyeColor)
HairEyeColor
install.packages("pander")
getwd()
pander(HairEyeColor)
library(pander)
pander(HairEyeColor)
str(HairEyeColor)
HairEyeColor
table(HairEyeColor)
HairEyeColor[1]
HairEyeColor[,1]
HairEyeColor[[1]]
HairEyeColor[[2]]
setwd("~/Github/Presentations/CDA_chapter1/")
counties <- readRDS("counties.rds")
head(counties)
